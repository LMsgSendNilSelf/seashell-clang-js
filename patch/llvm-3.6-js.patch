diff --git a/CMakeLists.txt b/CMakeLists.txt
index bb21cc5..604a246 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -171,7 +171,7 @@ set(LLVM_ALL_TARGETS
   )
 
 # List of targets with JIT support:
-set(LLVM_TARGETS_WITH_JIT X86 PowerPC AArch64 ARM Mips SystemZ)
+set(LLVM_TARGETS_WITH_JIT)
 
 set(LLVM_TARGETS_TO_BUILD "all"
     CACHE STRING "Semicolon-separated list of targets to build, or \"all\".")
diff --git a/cmake/modules/HandleLLVMOptions.cmake b/cmake/modules/HandleLLVMOptions.cmake
index 2ee0dd5..ac64c32 100644
--- a/cmake/modules/HandleLLVMOptions.cmake
+++ b/cmake/modules/HandleLLVMOptions.cmake
@@ -17,10 +17,6 @@ if(NOT LLVM_FORCE_USE_OLD_TOOLCHAIN)
       message(FATAL_ERROR "Host GCC version must be at least 4.7!")
     endif()
   elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.1)
-      message(FATAL_ERROR "Host Clang version must be at least 3.1!")
-    endif()
-
     # Also test that we aren't using too old of a version of libstdc++ with the
     # Clang compiler. This is tricky as there is no real way to check the
     # version of libstdc++ directly. Instead we test for a known bug in
diff --git a/include/llvm/ExecutionEngine/ExecutionEngine.h b/include/llvm/ExecutionEngine/ExecutionEngine.h
index d79bd3c..6dcfc72 100644
--- a/include/llvm/ExecutionEngine/ExecutionEngine.h
+++ b/include/llvm/ExecutionEngine/ExecutionEngine.h
@@ -359,10 +359,10 @@ public:
   /// Ptr is the address of the memory at which to store Val, cast to
   /// GenericValue *.  It is not a pointer to a GenericValue containing the
   /// address at which to store Val.
-  void StoreValueToMemory(const GenericValue &Val, GenericValue *Ptr,
-                          Type *Ty);
+  virtual void StoreValueToMemory(const GenericValue &Val, GenericValue *Ptr,
+                                  Type *Ty);
 
-  void InitializeMemory(const Constant *Init, void *Addr);
+  virtual void InitializeMemory(const Constant *Init, void *Addr);
 
   /// getOrEmitGlobalVariable - Return the address of the specified global
   /// variable, possibly emitting it to memory if needed.  This is used by the
@@ -466,13 +466,13 @@ public:
 protected:
   explicit ExecutionEngine(std::unique_ptr<Module> M);
 
-  void emitGlobals();
+  virtual void emitGlobals();
 
   void EmitGlobalVariable(const GlobalVariable *GV);
 
   GenericValue getConstantValue(const Constant *C);
-  void LoadValueFromMemory(GenericValue &Result, GenericValue *Ptr,
-                           Type *Ty);
+  virtual void LoadValueFromMemory(GenericValue &Result, GenericValue *Ptr,
+                                   Type *Ty);
 };
 
 namespace EngineKind {
diff --git a/include/llvm/ExecutionEngine/Interpreter.h b/include/llvm/ExecutionEngine/Interpreter.h
index f49d0c4..bf2e651 100644
--- a/include/llvm/ExecutionEngine/Interpreter.h
+++ b/include/llvm/ExecutionEngine/Interpreter.h
@@ -16,6 +16,7 @@
 #define LLVM_EXECUTIONENGINE_INTERPRETER_H
 
 #include "llvm/ExecutionEngine/ExecutionEngine.h"
+#include "../../../lib/ExecutionEngine/Interpreter/Interpreter.h"
 #include <cstdlib>
 
 extern "C" void LLVMLinkInInterpreter();
diff --git a/include/llvm/Target/TargetLibraryInfo.h b/include/llvm/Target/TargetLibraryInfo.h
index 46f87b9..9d9721a 100644
--- a/include/llvm/Target/TargetLibraryInfo.h
+++ b/include/llvm/Target/TargetLibraryInfo.h
@@ -294,8 +294,6 @@ namespace llvm {
       fmodl,
       /// FILE *fopen(const char *filename, const char *mode);
       fopen,
-      /// FILE *fopen64(const char *filename, const char *opentype)
-      fopen64,
       /// int fprintf(FILE *stream, const char *format, ...);
       fprintf,
       /// int fputc(int c, FILE *stream);
@@ -318,14 +316,10 @@ namespace llvm {
       fseek,
       /// int fseeko(FILE *stream, off_t offset, int whence);
       fseeko,
-      /// int fseeko64(FILE *stream, off64_t offset, int whence)
-      fseeko64,
       /// int fsetpos(FILE *stream, const fpos_t *pos);
       fsetpos,
       /// int fstat(int fildes, struct stat *buf);
       fstat,
-      /// int fstat64(int filedes, struct stat64 *buf)
-      fstat64,
       /// int fstatvfs(int fildes, struct statvfs *buf);
       fstatvfs,
       /// int fstatvfs64(int fildes, struct statvfs64 *buf);
@@ -334,8 +328,6 @@ namespace llvm {
       ftell,
       /// off_t ftello(FILE *stream);
       ftello,
-      /// off64_t ftello64(FILE *stream)
-      ftello64,
       /// int ftrylockfile(FILE *file);
       ftrylockfile,
       /// void funlockfile(FILE *file);
@@ -415,8 +407,6 @@ namespace llvm {
       logl,
       /// int lstat(const char *path, struct stat *buf);
       lstat,
-      /// int lstat64(const char *path, struct stat64 *buf);
-      lstat64,
       /// void *malloc(size_t size);
       malloc,
       /// void *memalign(size_t boundary, size_t size);
@@ -560,8 +550,6 @@ namespace llvm {
       sscanf,
       /// int stat(const char *path, struct stat *buf);
       stat,
-      /// int stat64(const char *path, struct stat64 *buf);
-      stat64,
       /// int statvfs(const char *path, struct statvfs *buf);
       statvfs,
       /// int statvfs64(const char *path, struct statvfs64 *buf)
@@ -647,8 +635,6 @@ namespace llvm {
       times,
       /// FILE *tmpfile(void);
       tmpfile,
-      /// FILE *tmpfile64(void)
-      tmpfile64,
       /// int toascii(int c);
       toascii,
       /// double trunc(double x);
diff --git a/lib/ExecutionEngine/Interpreter/Execution.cpp b/lib/ExecutionEngine/Interpreter/Execution.cpp
index 93bb2d1..ab0e240 100644
--- a/lib/ExecutionEngine/Interpreter/Execution.cpp
+++ b/lib/ExecutionEngine/Interpreter/Execution.cpp
@@ -1069,18 +1069,28 @@ void Interpreter::visitCallSite(CallSite CS) {
     switch (F->getIntrinsicID()) {
     case Intrinsic::not_intrinsic:
       break;
-    case Intrinsic::vastart: { // va_start
-      GenericValue ArgIndex;
-      ArgIndex.UIntPairVal.first = ECStack.size() - 1;
-      ArgIndex.UIntPairVal.second = 0;
-      SetValue(CS.getInstruction(), ArgIndex, SF);
+    case Intrinsic::vastart: {
+      // First argument is a va_list* (which, on most architectures,
+      // can be treated as an void** as sizeof(va_list) >= sizeof(void*))
+      GenericValue *ArgIndex = new GenericValue;
+      ArgIndex->UIntPairVal.first = ECStack.size() - 1;
+      ArgIndex->UIntPairVal.second = 0;
+      *static_cast<GenericValue**>(GVTOP(getOperandValue(CS.getArgument(0), SF))) = ArgIndex;
       return;
     }
-    case Intrinsic::vaend:    // va_end is a noop for the interpreter
+    case Intrinsic::vaend: { // va_end
+      // Free what the first argument points to.
+      GenericValue *ArgIndex = *static_cast<GenericValue**>(GVTOP(getOperandValue(CS.getArgument(0), SF)));
+      delete ArgIndex;
       return;
-    case Intrinsic::vacopy:   // va_copy: dest = src
-      SetValue(CS.getInstruction(), getOperandValue(*CS.arg_begin(), SF), SF);
+    }
+    case Intrinsic::vacopy: { // va_copy $0 $1: *$0 = *$1
+      GenericValue *NewArgIndex = new GenericValue;
+      GenericValue *OldArgIndex = *static_cast<GenericValue**>(GVTOP(getOperandValue(CS.getArgument(1), SF)));
+      *NewArgIndex = *OldArgIndex;
+      *static_cast<GenericValue**>(GVTOP(getOperandValue(CS.getArgument(0), SF))) = NewArgIndex;
       return;
+    }
     default:
       // If it is an unknown intrinsic function, use the intrinsic lowering
       // class to transform it into hopefully tasty LLVM code.
@@ -1717,9 +1727,11 @@ void Interpreter::visitBitCastInst(BitCastInst &I) {
 void Interpreter::visitVAArgInst(VAArgInst &I) {
   ExecutionContext &SF = ECStack.back();
 
-  // Get the incoming valist parameter.  LLI treats the valist as a
-  // (ec-stack-depth var-arg-index) pair.
-  GenericValue VAList = getOperandValue(I.getOperand(0), SF);
+  // Get the incoming valist parameter.  First argument
+  // is a pointer to the va_list structure (which has enough space
+  // to hold at least one i8*, on any reasonable architecture).
+  // Treat it as a void**, and retrieve our information from dereferencing twice.
+  GenericValue VAList = **static_cast<GenericValue**>(GVTOP(getOperandValue(I.getOperand(0), SF)));
   GenericValue Dest;
   GenericValue Src = ECStack[VAList.UIntPairVal.first]
                       .VarArgs[VAList.UIntPairVal.second];
diff --git a/lib/ExecutionEngine/Interpreter/Interpreter.h b/lib/ExecutionEngine/Interpreter/Interpreter.h
index 2be9c59..013c442 100644
--- a/lib/ExecutionEngine/Interpreter/Interpreter.h
+++ b/lib/ExecutionEngine/Interpreter/Interpreter.h
@@ -94,13 +94,14 @@ struct ExecutionContext {
 // Interpreter - This class represents the entirety of the interpreter.
 //
 class Interpreter : public ExecutionEngine, public InstVisitor<Interpreter> {
+protected:
   GenericValue ExitValue;          // The return value of the called function
-  DataLayout TD;
-  IntrinsicLowering *IL;
-
   // The runtime stack of executing code.  The top of the stack is the current
   // function record.
   std::vector<ExecutionContext> ECStack;
+private:
+  DataLayout TD;
+  IntrinsicLowering *IL;
 
   // AtExitHandlers - List of functions to call when the program exits,
   // registered with the atexit() library function.
@@ -193,9 +194,9 @@ public:
     llvm_unreachable("Instruction not interpretable yet!");
   }
 
-  GenericValue callExternalFunction(Function *F,
-                                    const std::vector<GenericValue> &ArgVals);
-  void exitCalled(GenericValue GV);
+  virtual GenericValue callExternalFunction(Function *F,
+                                            const std::vector<GenericValue> &ArgVals);
+  virtual void exitCalled(GenericValue GV);
 
   void addAtExitHandler(Function *F) {
     AtExitHandlers.push_back(F);
@@ -247,6 +248,7 @@ private:  // Helper functions
                                   ExecutionContext &SF);
   GenericValue executeCastOperation(Instruction::CastOps opcode, Value *SrcVal, 
                                     Type *Ty, ExecutionContext &SF);
+protected:
   void popStackAndReturnValueToCaller(Type *RetTy, GenericValue Result);
 
 };
diff --git a/lib/Support/DynamicLibrary.cpp b/lib/Support/DynamicLibrary.cpp
index d2b551e..c97e4e1 100644
--- a/lib/Support/DynamicLibrary.cpp
+++ b/lib/Support/DynamicLibrary.cpp
@@ -143,7 +143,7 @@ void* DynamicLibrary::SearchForAddressOfSymbol(const char *symbolName) {
 // On linux we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
 // boldly use the EXPLICIT_SYMBOL macro without checking for a #define first.
-#if defined(__linux__) and !defined(__ANDROID__)
+#if defined(__GLIBC__)
   {
     EXPLICIT_SYMBOL(stderr);
     EXPLICIT_SYMBOL(stdout);
diff --git a/lib/Support/Unix/Signals.inc b/lib/Support/Unix/Signals.inc
index e8f4643..8a320ef 100644
--- a/lib/Support/Unix/Signals.inc
+++ b/lib/Support/Unix/Signals.inc
@@ -416,7 +416,7 @@ static bool printSymbolizedStackTrace(void **StackTrace, int Depth, FILE *FD) {
 // On glibc systems we have the 'backtrace' function, which works nicely, but
 // doesn't demangle symbols.
 void llvm::sys::PrintStackTrace(FILE *FD) {
-#if defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
+#if defined(__GLIBC__) && defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
   static void* StackTrace[256];
   // Use backtrace() to output a backtrace on Linux systems with glibc.
   int depth = backtrace(StackTrace,
diff --git a/lib/Target/TargetLibraryInfo.cpp b/lib/Target/TargetLibraryInfo.cpp
index c0abdbd..27a51bd 100644
--- a/lib/Target/TargetLibraryInfo.cpp
+++ b/lib/Target/TargetLibraryInfo.cpp
@@ -160,7 +160,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "fmodf",
     "fmodl",
     "fopen",
-    "fopen64",
     "fprintf",
     "fputc",
     "fputs",
@@ -172,15 +171,12 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "fscanf",
     "fseek",
     "fseeko",
-    "fseeko64",
     "fsetpos",
     "fstat",
-    "fstat64",
     "fstatvfs",
     "fstatvfs64",
     "ftell",
     "ftello",
-    "ftello64",
     "ftrylockfile",
     "funlockfile",
     "fwrite",
@@ -220,7 +216,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "logf",
     "logl",
     "lstat",
-    "lstat64",
     "malloc",
     "memalign",
     "memccpy",
@@ -291,7 +286,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "sqrtl",
     "sscanf",
     "stat",
-    "stat64",
     "statvfs",
     "statvfs64",
     "stpcpy",
@@ -334,7 +328,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "tanl",
     "times",
     "tmpfile",
-    "tmpfile64",
     "toascii",
     "trunc",
     "truncf",
@@ -672,16 +665,9 @@ static void initialize(TargetLibraryInfo &TLI, const Triple &T,
     TLI.setUnavailable(LibFunc::under_IO_getc);
     TLI.setUnavailable(LibFunc::under_IO_putc);
     TLI.setUnavailable(LibFunc::memalign);
-    TLI.setUnavailable(LibFunc::fopen64);
-    TLI.setUnavailable(LibFunc::fseeko64);
-    TLI.setUnavailable(LibFunc::fstat64);
     TLI.setUnavailable(LibFunc::fstatvfs64);
-    TLI.setUnavailable(LibFunc::ftello64);
-    TLI.setUnavailable(LibFunc::lstat64);
     TLI.setUnavailable(LibFunc::open64);
-    TLI.setUnavailable(LibFunc::stat64);
     TLI.setUnavailable(LibFunc::statvfs64);
-    TLI.setUnavailable(LibFunc::tmpfile64);
   }
 }
 
diff --git a/lib/Transforms/IPO/FunctionAttrs.cpp b/lib/Transforms/IPO/FunctionAttrs.cpp
index 823ae53..14d9e31 100644
--- a/lib/Transforms/IPO/FunctionAttrs.cpp
+++ b/lib/Transforms/IPO/FunctionAttrs.cpp
@@ -1601,8 +1601,6 @@ bool FunctionAttrs::inferPrototypeAttributes(Function &F) {
     setDoesNotCapture(F, 1);
     setOnlyReadsMemory(F, 1);
     break;
-  case LibFunc::stat64:
-  case LibFunc::lstat64:
   case LibFunc::statvfs64:
     if (FTy->getNumParams() < 1 ||
         !FTy->getParamType(0)->isPointerTy() ||
@@ -1624,33 +1622,6 @@ bool FunctionAttrs::inferPrototypeAttributes(Function &F) {
     setOnlyReadsMemory(F, 1);
     setOnlyReadsMemory(F, 2);
     break;
-  case LibFunc::fopen64:
-    if (FTy->getNumParams() != 2 ||
-        !FTy->getReturnType()->isPointerTy() ||
-        !FTy->getParamType(0)->isPointerTy() ||
-        !FTy->getParamType(1)->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotAlias(F, 0);
-    setDoesNotCapture(F, 1);
-    setDoesNotCapture(F, 2);
-    setOnlyReadsMemory(F, 1);
-    setOnlyReadsMemory(F, 2);
-    break;
-  case LibFunc::fseeko64:
-  case LibFunc::ftello64:
-    if (FTy->getNumParams() == 0 || !FTy->getParamType(0)->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotCapture(F, 1);
-    break;
-  case LibFunc::tmpfile64:
-    if (!FTy->getReturnType()->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotAlias(F, 0);
-    break;
-  case LibFunc::fstat64:
   case LibFunc::fstatvfs64:
     if (FTy->getNumParams() != 2 || !FTy->getParamType(1)->isPointerTy())
       return false;
