diff --git a/CMakeLists.txt b/CMakeLists.txt
index 433948d..0140fe5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -149,7 +149,7 @@ set(LLVM_ALL_TARGETS
   )
 
 # List of targets with JIT support:
-set(LLVM_TARGETS_WITH_JIT X86 PowerPC AArch64 ARM Mips SystemZ)
+set(LLVM_TARGETS_WITH_JIT)
 
 set(LLVM_TARGETS_TO_BUILD "all"
     CACHE STRING "Semicolon-separated list of targets to build, or \"all\".")
diff --git a/cmake/modules/HandleLLVMOptions.cmake b/cmake/modules/HandleLLVMOptions.cmake
index 8258512..ab94388 100644
--- a/cmake/modules/HandleLLVMOptions.cmake
+++ b/cmake/modules/HandleLLVMOptions.cmake
@@ -13,10 +13,6 @@ if(NOT LLVM_FORCE_USE_OLD_TOOLCHAIN)
       message(FATAL_ERROR "Host GCC version must be at least 4.7!")
     endif()
   elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.1)
-      message(FATAL_ERROR "Host Clang version must be at least 3.1!")
-    endif()
-
     # Also test that we aren't using too old of a version of libstdc++ with the
     # Clang compiler. This is tricky as there is no real way to check the
     # version of libstdc++ directly. Instead we test for a known bug in
diff --git a/include/llvm/Target/TargetLibraryInfo.h b/include/llvm/Target/TargetLibraryInfo.h
index d4f9f23..ba56926 100644
--- a/include/llvm/Target/TargetLibraryInfo.h
+++ b/include/llvm/Target/TargetLibraryInfo.h
@@ -271,8 +271,6 @@ namespace llvm {
       fmodl,
       /// FILE *fopen(const char *filename, const char *mode);
       fopen,
-      /// FILE *fopen64(const char *filename, const char *opentype)
-      fopen64,
       /// int fprintf(FILE *stream, const char *format, ...);
       fprintf,
       /// int fputc(int c, FILE *stream);
@@ -295,14 +293,10 @@ namespace llvm {
       fseek,
       /// int fseeko(FILE *stream, off_t offset, int whence);
       fseeko,
-      /// int fseeko64(FILE *stream, off64_t offset, int whence)
-      fseeko64,
       /// int fsetpos(FILE *stream, const fpos_t *pos);
       fsetpos,
       /// int fstat(int fildes, struct stat *buf);
       fstat,
-      /// int fstat64(int filedes, struct stat64 *buf)
-      fstat64,
       /// int fstatvfs(int fildes, struct statvfs *buf);
       fstatvfs,
       /// int fstatvfs64(int fildes, struct statvfs64 *buf);
@@ -311,8 +305,6 @@ namespace llvm {
       ftell,
       /// off_t ftello(FILE *stream);
       ftello,
-      /// off64_t ftello64(FILE *stream)
-      ftello64,
       /// int ftrylockfile(FILE *file);
       ftrylockfile,
       /// void funlockfile(FILE *file);
@@ -392,8 +384,6 @@ namespace llvm {
       logl,
       /// int lstat(const char *path, struct stat *buf);
       lstat,
-      /// int lstat64(const char *path, struct stat64 *buf);
-      lstat64,
       /// void *malloc(size_t size);
       malloc,
       /// void *memalign(size_t boundary, size_t size);
@@ -537,8 +527,6 @@ namespace llvm {
       sscanf,
       /// int stat(const char *path, struct stat *buf);
       stat,
-      /// int stat64(const char *path, struct stat64 *buf);
-      stat64,
       /// int statvfs(const char *path, struct statvfs *buf);
       statvfs,
       /// int statvfs64(const char *path, struct statvfs64 *buf)
@@ -624,8 +612,6 @@ namespace llvm {
       times,
       /// FILE *tmpfile(void);
       tmpfile,
-      /// FILE *tmpfile64(void)
-      tmpfile64,
       /// int toascii(int c);
       toascii,
       /// double trunc(double x);
diff --git a/lib/Support/DynamicLibrary.cpp b/lib/Support/DynamicLibrary.cpp
index d2b551e..c97e4e1 100644
--- a/lib/Support/DynamicLibrary.cpp
+++ b/lib/Support/DynamicLibrary.cpp
@@ -143,7 +143,7 @@ void* DynamicLibrary::SearchForAddressOfSymbol(const char *symbolName) {
 // On linux we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
 // boldly use the EXPLICIT_SYMBOL macro without checking for a #define first.
-#if defined(__linux__) and !defined(__ANDROID__)
+#if defined(__GLIBC__)
   {
     EXPLICIT_SYMBOL(stderr);
     EXPLICIT_SYMBOL(stdout);
diff --git a/lib/Support/Unix/Signals.inc b/lib/Support/Unix/Signals.inc
index 1841fea..63190e4 100644
--- a/lib/Support/Unix/Signals.inc
+++ b/lib/Support/Unix/Signals.inc
@@ -266,7 +266,7 @@ void llvm::sys::AddSignalHandler(void (*FnPtr)(void *), void *Cookie) {
 // On glibc systems we have the 'backtrace' function, which works nicely, but
 // doesn't demangle symbols.
 void llvm::sys::PrintStackTrace(FILE *FD) {
-#if defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
+#if defined(__GLIBC__) && defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
   static void* StackTrace[256];
   // Use backtrace() to output a backtrace on Linux systems with glibc.
   int depth = backtrace(StackTrace,
diff --git a/lib/Target/TargetLibraryInfo.cpp b/lib/Target/TargetLibraryInfo.cpp
index 616ff90..bbb5b9e 100644
--- a/lib/Target/TargetLibraryInfo.cpp
+++ b/lib/Target/TargetLibraryInfo.cpp
@@ -150,7 +150,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "fmodf",
     "fmodl",
     "fopen",
-    "fopen64",
     "fprintf",
     "fputc",
     "fputs",
@@ -162,15 +161,12 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "fscanf",
     "fseek",
     "fseeko",
-    "fseeko64",
     "fsetpos",
     "fstat",
-    "fstat64",
     "fstatvfs",
     "fstatvfs64",
     "ftell",
     "ftello",
-    "ftello64",
     "ftrylockfile",
     "funlockfile",
     "fwrite",
@@ -210,7 +206,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "logf",
     "logl",
     "lstat",
-    "lstat64",
     "malloc",
     "memalign",
     "memccpy",
@@ -281,7 +276,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "sqrtl",
     "sscanf",
     "stat",
-    "stat64",
     "statvfs",
     "statvfs64",
     "stpcpy",
@@ -324,7 +318,6 @@ const char* TargetLibraryInfo::StandardNames[LibFunc::NumLibFuncs] =
     "tanl",
     "times",
     "tmpfile",
-    "tmpfile64",
     "toascii",
     "trunc",
     "truncf",
@@ -661,16 +654,9 @@ static void initialize(TargetLibraryInfo &TLI, const Triple &T,
     TLI.setUnavailable(LibFunc::under_IO_getc);
     TLI.setUnavailable(LibFunc::under_IO_putc);
     TLI.setUnavailable(LibFunc::memalign);
-    TLI.setUnavailable(LibFunc::fopen64);
-    TLI.setUnavailable(LibFunc::fseeko64);
-    TLI.setUnavailable(LibFunc::fstat64);
     TLI.setUnavailable(LibFunc::fstatvfs64);
-    TLI.setUnavailable(LibFunc::ftello64);
-    TLI.setUnavailable(LibFunc::lstat64);
     TLI.setUnavailable(LibFunc::open64);
-    TLI.setUnavailable(LibFunc::stat64);
     TLI.setUnavailable(LibFunc::statvfs64);
-    TLI.setUnavailable(LibFunc::tmpfile64);
   }
 }
 
diff --git a/lib/Transforms/IPO/FunctionAttrs.cpp b/lib/Transforms/IPO/FunctionAttrs.cpp
index 8174df9..7fa3e52 100644
--- a/lib/Transforms/IPO/FunctionAttrs.cpp
+++ b/lib/Transforms/IPO/FunctionAttrs.cpp
@@ -1593,8 +1593,6 @@ bool FunctionAttrs::inferPrototypeAttributes(Function &F) {
     setDoesNotCapture(F, 1);
     setOnlyReadsMemory(F, 1);
     break;
-  case LibFunc::stat64:
-  case LibFunc::lstat64:
   case LibFunc::statvfs64:
     if (FTy->getNumParams() < 1 ||
         !FTy->getParamType(0)->isPointerTy() ||
@@ -1616,33 +1614,6 @@ bool FunctionAttrs::inferPrototypeAttributes(Function &F) {
     setOnlyReadsMemory(F, 1);
     setOnlyReadsMemory(F, 2);
     break;
-  case LibFunc::fopen64:
-    if (FTy->getNumParams() != 2 ||
-        !FTy->getReturnType()->isPointerTy() ||
-        !FTy->getParamType(0)->isPointerTy() ||
-        !FTy->getParamType(1)->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotAlias(F, 0);
-    setDoesNotCapture(F, 1);
-    setDoesNotCapture(F, 2);
-    setOnlyReadsMemory(F, 1);
-    setOnlyReadsMemory(F, 2);
-    break;
-  case LibFunc::fseeko64:
-  case LibFunc::ftello64:
-    if (FTy->getNumParams() == 0 || !FTy->getParamType(0)->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotCapture(F, 1);
-    break;
-  case LibFunc::tmpfile64:
-    if (!FTy->getReturnType()->isPointerTy())
-      return false;
-    setDoesNotThrow(F);
-    setDoesNotAlias(F, 0);
-    break;
-  case LibFunc::fstat64:
   case LibFunc::fstatvfs64:
     if (FTy->getNumParams() != 2 || !FTy->getParamType(1)->isPointerTy())
       return false;
